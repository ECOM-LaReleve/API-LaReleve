apply plugin: 'ear'

/* Content of EAR */
dependencies {
    deploy project(path: ':logger', configuration: 'archives')
    deploy project(path: ':lareleve-web', configuration: 'archives')
    deploy project(path: ':lareleve-ejb', configuration: 'archives')
}

ear {
    deploymentDescriptor {
        applicationName = "laReleve"
        initializeInOrder = false
        displayName = "laReleve"
        description = "laReleve"

        /* Content of application.xml in EAR */
        webModule("lareleve-web.war", "/")
        module("logger.jar", "java")
        module("lareleve-ejb.jar", "ejb")
    }
}

/* Eclipse plugin */
apply plugin: 'eclipse-wtp'
eclipse.project {
    natures 'org.springsource.ide.eclipse.gradle.core.nature'
}

/* DOCKER PLUGIN */
/* Add docker plugin as dependency */
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

/* DOCKER PLUGIN CONFIGURATION */
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.bmuschko.docker-java-application'
repositories {
    mavenCentral()
}

/* copy builded libs into docker folder */
task prepareImage(type: Copy) {
    dependsOn build
    from 'build/libs'
    into 'docker/build'
}

/* When cleaning project, remove also build folder in docker folder */
clean.doFirst {
    delete "${rootDir}/docker/build"
}

/* Creation of Docker image */
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task buildImage(type: DockerBuildImage) {
    dependsOn prepareImage
    tag = 'lareleve:latest'
}

task deployLocal {
    dependsOn "build"
    doLast {
        // Check environment variable. JEE_CONTAINER must exist
        def location = System.env.JEE_CONTAINER
        if(!location) {
            throw new GradleException('Environment variable JEE_CONTAINER is not set')
        }

        // Remove already deployed ear
        print "remove old ear: ${location}/${project.name}*\n"
        delete fileTree(dir: "${location}", include: "${project.name}*")

        // copy new ear
        print "set new ear: build/libs/${project.name}.ear\n"
        copy {
            from "build/libs/${project.name}.ear"
            into "${location}/"
        }
    }
}
